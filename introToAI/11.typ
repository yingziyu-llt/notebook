= 局部优化搜索算法

== 引入
做某些大问题的时候，我们很难求出所有解，可能只需要找到某一个特定的解就可以。
但全局搜索方法需要记住搜索路径，会受到内存的限制，不适合解决超大规模问题。
对于一些并不需要关心解的路径，只需要得到一个可行解。
上节课讲的A\*使用问题相关的启发式函数来加快搜索。现在将启发式函数转化为状态估值函数来优化。

== 局部搜索算法
=== 基本思路
从一个状态出发，向更好的邻居状态移动。

若邻居状态不如的房前状态的评估值高，就来到了一个局部极值点，若全局只有一个最优解，那就是全局最优解。

=== 问题
考虑解空间的形状。

局部极值，全局最优，平台，肩状平台

最优和完备性。

最优：能找到最优解。

完备：有解一定能找到。

== 局部最优算法选讲

=== 爬山法
每次从当前状态中移动到相邻节点中最好的一个。每次只存储当前节点和一个估值函数。

容易陷入局部最优。对于随机生成的八皇后问题，有86%会陷入局部最优解。

==== 随机平移
随机选取一个h=1的状态，允许跳到另一个随机的h=1状态。
给出一个上限避免死循环。
平均步数增加，但是出解率大幅上升。

随机平移只能跳出肩状平台。

==== 随机爬山法
每次从更优的节点里面随机选取一个。
收敛速度慢，但是有可能获得更优的解。

不一定是完全随机，可以根据陡峭程度生成选择概率，收敛速度可以加速。

==== 第一选择爬山法
每次随机选择一个邻居，计算估值，若估计比当前的好，立马跳过去。否则换一个重复。

不需要生成估值表，适合于有很多邻居的时候。

==== 随机重启爬山法
没找到解就从一个随机的位置重新开始。是近乎完备的。
对于八皇后问题，随机重启爬山法非常高效。

=== 模拟退火
模拟金属退火的过程。

跳到差的概率和差的程度以及温度呈指数关系。要是好一定走，差的话按照概率走
p服从：$p=e^((Delta E)/T),Delta E=E_("new") - E_("old")$
